CREATE COMPUTE MODULE SELECT_R_ROLE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inms CHARACTER;
		DECLARE out_msg CHARACTER;
		DECLARE SQLErrorText1 CHARACTER;   
		DECLARE SQLCode1 INTEGER;  
		DECLARE data_length INTEGER; 
		DECLARE location_data CHARACTER;  
		DECLARE mySharedRow ROW;
		SET SQLErrorText1 = '';

		DELETE FROM Database.MINORDB.db2inst1.R_ROLE AS D;
		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;
					
		COMMIT;	
					
		-- COMMIT;	
		
		--* SET OutputRoot.JSON.Data.ResultSet[] = select  R.name_role,L.location_id from Database.MINORDB.db2inst1.TMP_ROLE AS R,Database.MINORDB.db2inst1.M_LOCATION AS L where (R.establishment = L.resource_uri_est and L.location_id is not null) and (R.name_role  not in (select M.name from Database.MINORDB.db2inst1.M_ROLE AS M) and L.location_id  not in (select M.location_id from Database.MINORDB.db2inst1.M_ROLE AS M));
		
		SET OutputRoot.JSON.Data.ResultSet[] = PASSTHRU ('select  R.active_role,R.name_role,L.location_id,R.resource_uri_role,R.establishment from db2inst1.TMP_ROLE AS R,db2inst1.M_LOCATION AS L where (R.establishment = L.resource_uri_est and L.location_id is not null) and (R.resource_uri_role not in (select resource_uri_role from r_role) and R.establishment not in (select resource_uri_est from r_role)) and R.active = ''1'' and R.active_role = ''1''  group by R.active_role,R.name_role,L.location_id,R.resource_uri_role,R.establishment');
		
		--* insert into Database.MINORDB.db2inst1.M_LOCATION (id_adr)	VALUES (OutputRoot.JSON.Data.ResultSet[5].ID_ADR);
		
		DECLARE i INTEGER 1;
		
		
		FOR source AS OutputRoot.JSON.Data.ResultSet[] DO
		insert
		into Database.MINORDB.db2inst1.R_ROLE
		(	
			active,
			name,
			location_id,
			export_name,
			resource_uri_role,
			resource_uri_est)
		VALUES
		(
			source.ACTIVE_ROLE,
			source.NAME_ROLE,
			source.LOCATION_ID,
			source.NAME_ROLE,
			source.RESOURCE_URI_ROLE,
			source.ESTABLISHMENT);

							
		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;
					
		COMMIT;		

		
		SET i = i + 1;
		END FOR;
		
		SET OutputRoot.JSON.Data.ReconTemp[] = select A.* from Database.MINORDB.db2inst1.TMP_ROLE AS A;

		FOR source AS OutputRoot.JSON.Data.ReconTemp[] DO
			
		UPDATE Database.MINORDB.db2inst1.R_ROLE AS A
		
 		SET name = source.NAME_ROLE
 		where A.resource_uri_est = source.ESTABLISHMENT and A.resource_uri_role = source.RESOURCE_URI_ROLE;
 		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;

 		COMMIT;
 		
 		END FOR;
 		
 		
		
		SET OutputRoot.JSON.Data.UpdateID[] = select * from Database.MINORDB.db2inst1.M_ROLE;

		FOR source AS OutputRoot.JSON.Data.UpdateID[] DO
			
		UPDATE Database.MINORDB.db2inst1.R_ROLE AS A
		
 		SET id = source.ID,
 			flag = '0'
 		where A.resource_uri_role = source.RESOURCE_URI_ROLE and A.resource_uri_est = source.RESOURCE_URI_EST;
 		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;

 		COMMIT;
 		
 		END FOR;
 		
 		UPDATE Database.MINORDB.db2inst1.M_ROLE AS A
		
 		SET flag = '3'
 		 			
 		where not exists (select * from Database.MINORDB.db2inst1.M_ROLE AS B where B.id = A.id);
 		SET SQLCode1 = SQLCODE;
		SET SQLErrorText1 = SQLERRORTEXT;

 		COMMIT;

		SET OutputRoot.JSON.Data.Del[] = select A.id from Database.MINORDB.db2inst1.M_ROLE AS A where A.flag = '3';
		
		RETURN TRUE;
		
	END;


END MODULE;