

CREATE COMPUTE MODULE SM_Schedul_CreateSchedule
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE i,j, no_roster, no_schedule INTEGER; 
		SET i = 1;
		SET j = 1;
		SET no_roster = CARDINALITY(InputRoot.JSON.Data.schedules.Item[]);
		
		DECLARE EPOCH_TIME,TMP_TSP TIMESTAMP;
		SET EPOCH_TIME = CAST('1970-01-01T00:00:00.000+00.00' AS TIMESTAMP FORMAT 'IU');
		DECLARE my_credentials ROW;
		SET my_credentials.Item[] = (SELECT CC.SYSTEM_KEY AS SYSTEM_KEY FROM Database.C_CREDENTIALS AS CC, Database.C_ENVIRONMENT AS CE WHERE CC.SYSTEM_CODE = CE.REFCODE AND CE.SYSTEM_NAME = 'Revel' AND CE.FLAG = 1 );	
		
		/*
		SET no_schedule = CARDINALITY(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[]);
		SET OutputRoot.JSON.Data.no_roster = no_roster;
		SET OutputRoot.JSON.Data.no_schedule = no_schedule;
		PROPAGATE TO TERMINAL 'out1';
		*/
		
		DECLARE count INTEGER 1;
		DECLARE tmp, current_epoch,dept_id CHARACTER;
		DECLARE rvl_resource ROW;
		DECLARE dept_resource ROW;
		DECLARE length INTEGER;
		DECLARE	did	INTEGER;
		
		WHILE i <= no_roster DO
			
			-- SET OutputRoot.JSON.Data.created_date = InputRoot.JSON.Data.schedules.Item[i].date;
			
			SET no_schedule = CARDINALITY(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[]);
			DECLARE recentSchedule ROW;
			
			
			WHILE j <= no_schedule DO
				
				SET dept_resource.Item[] = (SELECT ME.ID_DEPARTMENT AS DEPTID FROM Database.M_EMPLOYEE AS ME WHERE ME.ID = InputRoot.JSON.Data.schedules.Item[i].schedules.Item[j].user_id );
				
				SET length = LENGTH(dept_resource.Item[1].DEPTID);			
				
				SET count = 1;
				
				WHILE count <= length DO
					SET did = TRIM(SUBSTRING(dept_resource.Item[1].DEPTID from count for 6));	
					
					SET OutputRoot.JSON.Data.department =  '/resources/Department/2/';
					SET OutputRoot.JSON.Data.created_by = '/enterprise/User/6/';
					SET OutputRoot.JSON.Data.updated_by = '/enterprise/User/6/';
					SET OutputRoot.JSON.Data.stage = CAST(0 AS INTEGER);
				
					SET current_epoch = CAST(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[j].start AS CHARACTER);
					SET TMP_TSP = EPOCH_TIME + CAST(current_epoch AS INTERVAL SECOND);
					SET tmp = CAST(TMP_TSP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
					SET tmp = REPLACE(tmp, ' ', 'T');
					SET OutputRoot.JSON.Data.shift_begin_time = tmp;
					
					SET current_epoch = CAST(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[j].finish AS CHARACTER);
					SET TMP_TSP = EPOCH_TIME + CAST(current_epoch AS INTERVAL SECOND);
					SET tmp = CAST(TMP_TSP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
					SET tmp = REPLACE(tmp, ' ', 'T');
					SET OutputRoot.JSON.Data.shift_end_time = tmp;
					
					SET current_epoch = CAST(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[j].updated_at AS CHARACTER);
					SET TMP_TSP = EPOCH_TIME + CAST(current_epoch AS INTERVAL SECOND);
					SET tmp = CAST(TMP_TSP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss');
					SET tmp = REPLACE(tmp, ' ', 'T');
					
					SET OutputRoot.JSON.Data.updated_date = tmp;
					SET OutputRoot.JSON.Data.created_date = tmp;
					
					SET rvl_resource.Item[] = (SELECT MR.RESOURCE_URI_EST AS ESTID, MR.RESOURCE_URI_ROLE AS ROLEID, ME.RESOURCE_URI AS EMPID FROM Database.M_EMPLOYEE AS ME, Database.M_ROLE AS MR WHERE MR.ID = CAST(did AS CHARACTER) AND ME.ID = InputRoot.JSON.Data.schedules.Item[i].schedules.Item[j].user_id);
					
					SET OutputRoot.JSON.Data.establishment = rvl_resource.Item[1].ESTID;
					SET OutputRoot.JSON.Data.role = rvl_resource.Item[1].ROLEID; 
					SET OutputRoot.JSON.Data.employee = rvl_resource.Item[1].EMPID;
			
					-- CARDINALITY(InputRoot.JSON.Data.schedules.Item[i].schedules.Item[]);
					-- SET OutputRoot.JSON.Data.no_schedule = no_schedule;
					-- PROPAGATE TO TERMINAL 'out1';
			
				
					-- check if schedule was already push back to revel
					-- SET recentSchedule.Item[] = (SELECT MS.ID FROM Database.M_SCHEDULE AS MS WHERE MS.EST_ID = xx AND MS.ROLE_ID = xx AND MS.EMP_ID = xx AND MS.CREATED_DATE = xx);
			/*
					INSERT INTO Database.M_SCHEDULE(m_start, m_finsih, est_id, role_id, emp_id)
						VALUES(
							OutputRoot.JSON.Data.shift_begin_time,
							OutputRoot.JSON.Data.shift_end_time,
							OutputRoot.JSON.Data.establishment,
							OutputRoot.JSON.Data.role,
							OutputRoot.JSON.Data.employee
						);
					COMMIT;		
			*/
			
					SET OutputLocalEnvironment.Destination.REST.Request.Parameters."API-AUTHENTICATION" = my_credentials.Item[1].SYSTEM_KEY;			
			
					PROPAGATE TO TERMINAL 'out1';
					SET count = count + 8;
				END WHILE;
				SET j = j + 1;
			END WHILE;
			
			SET j = 1; 
			SET i = i + 1;
		END WHILE;
		
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
